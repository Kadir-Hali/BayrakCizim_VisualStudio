<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="ımageList1.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <data name="ımageList1.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAFdTeXN0ZW0uV2luZG93cy5Gb3JtcywgVmVyc2lvbj0yLjAuMC4w
        LCBDdWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkFAQAAACZTeXN0
        ZW0uV2luZG93cy5Gb3Jtcy5JbWFnZUxpc3RTdHJlYW1lcgEAAAAERGF0YQcCAgAAAAkDAAAADwMAAABG
        DAAAAk1TRnQBSQFMAgEBBAEAASQBAAEkAQABEAEAARABAAT/AREBAAj/AUIBTQE2BwABNgMAASgDAAFA
        AwABIAMAAQEBAAEQBgABEP8A/wD/AP8A/wD/AP8A/wAiAAHnAUgBxAFkAcYBTAGtAU0B1gFiFgABWgFr
        ATkBZwEYAWMBGAFjARgBYwEYAWMBGAFjARgBYwEYAWMBOQFnCgABWgFrATkBZwEYAWMBtQFWATgBOgE4
        ATIBOAE6AXMBTgG1AVYB9wFeARgBYwE5AWcEAAEIASEBhAEQAYQBEAGlARQBpQEUAaUBFAGlARQBpQEU
        AYQBEAGEARABYwEMAUIBCAEhAQQBIQEEAaUBFAYAAXIBVgEjAXEBxQFYAcYBVAHGAVAB5gFUAeMBdAHD
        AXQBxAFYAecBRAHOAU0B9wFmCAABWgFrAXMBTgEIAR0BKAEdASgBHQEoAR0BKAEdASgBHQEoAR0BKAEd
        AQgBHQHWAVoMAAFaAToBWgE2AVoBNgH+AUoBfAE6AXwBOgFZAToIAAGUAVIBSgEpAYQBEAGEARABhAEQ
        AaUBFAGlARQBpQEUAaUBFAGEARABYwEMAWMBDAFCAQgBIQEEAWMBDAHGARgGAAFKAToBpQFQAVYBbwFW
        AW8BdQFzAS8BVgFMAUEB6QE4AacBOAHHAUAB5QFgAcIBeAEIAU0IAAG1AVYBvQF3ASsBNgHFASUBxgEl
        AcYBJQHGASUBxgElAcYCJQEqATkBZwoAAToBYwgAAVoBOgGcAT4BfAE6AXsBPgYAAdYBWgFrAS0BxgEY
        AYQBEAGEARABpQEUAaUBFAGlARQBpQEUAYQBEAFjAQwBYwEMAUIBCAEhAQQBpQEUAYQBEAYAAeQBZAGN
        AUYBWQFvAf0BewH9AXsB3AF3AXoBcwEXAWsB9gFmAdUBZgE2AW8B7gFNATABZggAAbUBYgEQAWYBvQF3
        Ab0BdwENAT4BxQElAcYBJQHGASUBxgIlASoKAAFbATYMAAF6AToBnAE+AZwBPgF6AT4EAAEYAWMBawEt
        AQgBIQGEARABhAEQAYQBEAGlARQBpQEUAaUBFAGEARABYwEMAWMBDAFCAQgBQgEIAaUBFAFCAQgGAAEl
        AWEBdgF3ATgBZwG8AXcBvAFzAXsBbwF7AW8BvAFvAd0BawHdAW8B3QF3AQ8BYgoAAdYBYgFjAWwB5wFY
        AZsBcwE5AWcBmwFvAawBNQGFASEBhQEhAQQBKggAARoBWwF8AToBGgFbDAAB/gFKAb0BPgG9AT4EAAE5
        AWcBKQElAecBHAHnARwBCAEhAQgBIQEIASEBCAEhAecBHAEIASEBCAEhAQgBIQHnARwB5wEcAcYBGAEh
        AQQEAAGUAV4BxgFMATUBawE0AVMB9QFWAe0BLgEOATsBvAFvAd0BcwHdAXcB/QF3Ad0BdwHEAVwEAAHG
        AWwBxgFsAcYBbAHGAWwBAAFsAQABbAFCAVQBWgFrAfcBXgFaAWsBZAEdAWQBHQHkASUIAAGcAT4BnAE+
        AZwBPgwAAbsBRgG9AUIBvQFCBgAB5wEcAecBHAEIASEBCAEhAQgBIQEIASEBGAFjAecBHAEIASEBCAEh
        AQgBIQEIASEB5wEcAcYBGAEhAQQEAAEIAU0BDQFeAbYBYgHNAS4BfAFrATMBTwG9AXMBfAFvAZwBbwH9
        AXcBnAFvAckBNAGqAXUEAAHGAXABAAFsAQABbAEAAWwBAAFsAQABbAEAAWwBQwFgARcBXwFaAWsBIwEZ
        ASQBGQHEASEGAAF7AToBnQE+AZ0BPgGdAT4BnAE+CAAB/QFKAd4BRgHeAUYB3gFGAd0BRgG8AUYCAAHG
        ARgBCAEhAQgBIQEIASEBCAEhAVoBawEIASEBCAEhAQgBIQEIASEBCAEhAQgBIQHnARwB5wEcASEBBAQA
        AeQBZAHWAXsB/QF7AVsBawHdAW8BvQFzAe4BQQFtAToB3QF3AbYBWgG2AVoBxQFMBgABCAF5AcYBfAEI
        AX0BCAF9AQgBfQEIAX0BCAF9AYQBVAEYAWMBWgFrAQMBFQEDARUBowEhBAAB+gFWAR4BTwG9AUIBvQFC
        AR4BTwH+AUoBGwFbCAABPgFTAf4BSgH+AUoB3QFGBAABxgEYAQgBIQEIASEBKQElAecBHAFaAWsBcwFO
        AZQBUgGUAVIBlAFSAZQBUgG1AVYB7wE9AecBHAYAAQUBYQEVAWsBugF3AYcBewFuAXcBeAFvAQwBJwGZ
        AW4BbwFSAVoBZwGuAUkBxAFcBgABKQF9AWsBfQFrAX0BawF9AecBfAEIAX0B5wFYAVkBZwFRAUYBOQFn
        AcIBEAHCARABgwEdCAABvQFCAb0BQgHeAUYMAAHcAUoB/gFKAf4BTgYAAaUBFAEIASEBKQElASkBJQEp
        ASUBxgEYAb0BdwEIASEBKQElAUoBKQFKASkBawEtAc4BOQHnARwEAAFzAV4BBwFRAfYBZgGHAXsBZAF/
        AcYBegGEAX8B3gF7Af4BewHEARgBMAFCAcgBPAEEAX0MAAHWAWIBKQF9AYwBXQGbAXMBWQFnAfYBXgF6
        AWsBogEMAaIBDAFiAR0IAAG8AUYB3gFGAd4BRgH7AVIMAAEeAVMB/AFOBgABpQEUASkBJQEpASUBKQEl
        AUoBKQFKASkB5wEcAUoBKQFKASkBSgEpAUoBKQGtATUBrQE1AQgBIQQAAcYBTAFvAWIB3AF7AWcBdgFE
        AX8BKQF2AUsBdwH9AXsB/QF/ASgBJQGEARQBxQFMAfcBbgwAAbUBYgFzAWoBvQF3AZsBcwFZAWcB9wFe
        AVoBawFhAQgBgQEIAWIBGQoAAd4BRgHeAUYBPwFTAVoBaxQAAaUBFAEpASUBKQElAUoBKQFKASkBSgEp
        AUoBKQFKASkBSgEpAWsBLQFKASkBEAFCAYwBMQEIASEEAAHDAXABtgF3AbYBewEkAX8BZwF6AQQBfwG6
        AXsB3QF7Af0BfwHdAXcBpQEYAcYBGA4AARgBXwHeAXsBvQF3AZsBcwFZAWcB9wFeAXoBawFAAQQBQQEE
        AUIBFQoAAVoBZwFfAVcBXwFXAX8BWwEcAVcGAAEcAVcKAAGlARQBKQElAUoBKQFKASkBSgEpAUoBKQFK
        ASkBSgEpAYwBMQFrAS0BawEtAQgBIQFKASkBCAEhBAABiQFxAaMBZAH4AX8BtQEyAZcBLgG1ATYBmwFj
        Af4BfwH9AX8B/gF/AXABYgHHASABxwEgDAAB9wFeAd4BewG9AXcBmwFzAVkBawGUAVIB9gFeAgABIAEA
        ASEBFQ4AAf0BSgEeAU8B/gFKAV8BVwE/AVMB/gFKDAABhAEQAUoBKQFKASkBSgEpAWsBLQFrAS0BawEt
        AWsBLQGMATEBjAExAWsBLQFrAS0BSgEpAQgCIQEECAABUwEuAdYBNgG0AToBkwE2ATIBLgEwAU4B7gFh
        AcUBXAGqAVEBqgE1AdYBWgoAAfcBXgH+AX8BvQF3ARABQgHOATkBrQE1AYsBMQQAAQEBESYAAUoBKQFK
        ASkBSgEpAWsBLQFrAS0BawEtAWsBLQFrAS0BrQE1AYwBMQGMATEBawEtAUoBKQHnARwBOQFnCgABWgFr
        AfABKQH3AToB9gE6BAAB9gFuAgABGAFjDAABGAFjAa0BNQGtATUBrgE1Aa4BNQGtATUBrQE1Aa0BNQGt
        ATUBrQE1KAABSgEpAWsBLQFrAS0BawEtAWsBLQFrAS0BrQE1Aa0BNQGtATUBrQE1AYwBMQFrAS0BSgEp
        ZgABOQFnAZQBUgGUAVIBlAFSAZQBUgG1AVYBtQFWAbUBVgG1AVYBtQFWAbUBVgGUAVIEAAFCAU0BPgcA
        AT4DAAEoAwABQAMAASADAAEBAQABAQYAAQEWAAP/gQAB8AF/AfABAwHgAQEBgAEAAeABAQHgAQEB+AEP
        AgAB4AEAAfABAQH3AYcCAAHgAQAB8AEDAe8BwwIAAeABAQHwAQMBxwHjAgABwAEBAYABAwHHAeMBgAEA
        AcABAQGAAQMBgwHAAYABAAHAAQMBgAEDAQEB4QGAAQABwAEDAYABAwHHAeMBgAEAAYABAwHwAQMBwwHz
        AYABAAGAAQMB8AEDAeEB/wGAAQABgAEHAfABAwHgAe8BgAEAAYABAwHwAQMB+AEfAYABAAHwAQEB8AED
        Av8BgAEAAfgBawHwAQMC/wHAAQEG/wHAAQML
</value>
  </data>
</root>